
 Android源码添加自定义系统服务

本文以一个简单的例子详细介绍如何为Android 6.0 系统新增一个系统服务,以及如何使用自定义系统服务。

目标：1.创建一个自定义服务CCCService

        2.APP 开发过程中可以使用 getSystemService("ccc") 获取 CCCManager 并且调用里面的函数。

 

 step1 创建aidl文件

在源码frameworks/base/core/java/android/os/ 下面新增 一个 ICCCService.aidl

假设我们定义了5个函数，这些函数将会在SystemServer进程执行。

内容如下 
复制代码

// ICCCService.aidl
package android.os;

// Declare any non-default types here with import statements

interface ICCCService {
    /**
     * Demonstrates some basic types that you can use as parameters
     * and return values in AIDL.
     */
   void setVal(String key,String value);
   String getVal(String key);
   void appendLog(String log);
   void clearLog();
   String readLog();
}

复制代码

 

step2 创建Service文件 （CCCService）

在 frameworks/base/services/core/java/com/android/server/ 下面新增一个 CCCService.java 用来实现aidl文件定义的接口。

内容如下
复制代码

package com.android.server;

import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.lang.*;
import java.util.HashMap;
import android.os.RemoteException;
import android.os.ICCCService;


/**
 *
 * Created by zhuangqianliu on 2016/9/21.
 */

public class CCCService extends ICCCService.Stub {
    private static HashMap<String,String> map=new HashMap<>();
    private static String inner_log="";

    public CCCService() {

    }

    @Override
    public void setVal(String key, String value) throws RemoteException {
        map.put(key,value);
    }

    @Override
    public String getVal(String key) throws RemoteException {
        return map.get(key);
    }

    @Override
    public void appendLog(String log) throws RemoteException {
        inner_log+=log+"\n";
    }

    @Override
    public void clearLog() throws RemoteException {
        inner_log="";
    }

    @Override
    public String readLog() throws RemoteException {
        return inner_log;
    }

}

复制代码

 

step3 将自定义Service 加入到SystemServer 启动进程

先在 frameworks/base/core/java/android/content/Context.java 中添加一行 

public static final String CCC_SERVICE="ccc";

修改 frameworks/base/services/java/com/android/server/SystemServer.java

在  startOtherServices() 函数 的try模块中增加以下代码
复制代码

 try {

                Slog.i(TAG, "CCC Service");

                ServiceManager.addService(Context.CCC_SERVICE, new CCCService());

            } catch (Throwable e) {

                Slog.e(TAG, "Failure starting CCC Service", e);

            }

复制代码

最终效果如图

 

step4 创建Manager，即CCCManager

在frameworks/base/core/java/android/app/ 下创建CCCManager.java 文件 内容如下
复制代码

package android.app;

/**
 * Created by liam on 16/10/2.
 */
import android.annotation.SdkConstant;
import android.annotation.SystemApi;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.RemoteException;
import android.os.ICCCService;
import android.util.Log;

public class CCCManager {
    ICCCService mService;
    public CCCManager(Context ctx,ICCCService service){
        mService=service;
    }
    public void setVal(String key,String value){
        try{
            mService.setVal(key,value);
        }catch(Exception e){
            Log.e("CCCManager",e.toString());
            e.printStackTrace();
        }

    }
    public String getVal(String key){
        try{
            return mService.getVal(key);
        }catch(Exception e){
            Log.e("CCCManager",e.toString());
            e.printStackTrace();
        }
        return null;
    }
    public void appendLog(String log){
        try{
            mService.appendLog(log);
        }catch(Exception e){
            Log.e("CCCManager",e.toString());
            e.printStackTrace();
        }
    }
    public void clearLog(){
        try{
            mService.clearLog();
        }catch(Exception e){
            Log.e("CCCManager",e.toString());
            e.printStackTrace();
        }
    }
    public String readLog(){
        try{
            return mService.readLog();
        }catch(Exception e){
            Log.e("CCCManager",e.toString());
            e.printStackTrace();
        }
        return null;
    }
}

复制代码

 

step5 注册到SystemService

修改frameworks/base/core/java/android/app/SystemServiceRegistry.java

在静态代码块中增加
复制代码

 registerService(Context.CCC_SERVICE, CCCManager.class,
                new CachedServiceFetcher<CCCManager>() {
                    @Override
                    public CCCManager createService(ContextImpl ctx) {
                        IBinder b = ServiceManager.getService(Context.CCC_SERVICE);
                        ICCCService service = ICCCService.Stub.asInterface(b);
                        return new CCCManager(ctx, service);
                    }});

复制代码

 

step6 修改SePolicy的编译验证

修改 /external/sepolicy/service.te

在最后一行添加

type ccc_service, system_api_service, system_server_service, service_manager_type;

然后修改同目录下 /external/sepolicy/service_contexts 文件

中间插入一行 

ccc u:object_r:ccc_service:s0

如图所示

 

 
step7 修改 frameworks/base/Android.mk
frameworks/base/Android.mk
LOCAL_SRC_FILES += \
...
core/java/android/os/ICCCService.aidl \

step 重新编译源码

别忘了先 make update-api。

 

 

Step8 测试 

 

tip: 

可以先创建一个java工程简单写一个CCCManager类，导出jar 在ide中使用provided 依赖。这样开发过程中就不会报错。

 

 


 


 

